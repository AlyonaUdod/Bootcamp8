// 1) Створюємо новий репозиторій
// 2) Додаємо на репозиторій gitIgnore file
// 3) Додаємо файл README.md
// 3.1) git clone URL
// 3.2) закрити консоль, перейти в папку яка зявляється після клону і відкрити там нову консоль(якщо все зроблено правильно в консолі буде писатися синіми літерами слово (master))
// 3.3) Додаємо збірку gulp в склонований репозиторій
// 4) Налаштовуємо базову структуру проекту(створюжмо всі необхідна папки, файли, перевірити формати файлів з яким працює gulp - в gulpfile.js) 
// (https://sass-scss.ru/documentation/funktsii/)
// 5) Після налаштування проекту закомітити зміни і запушити їх в мастер (git add . git commit -m "some text" git push)
// 6) Збираємо нікнейми гіта всіх членів команди і додаємо їх в colaboration репозиторія
// 7) Всі члени команди мають прийняти запрошення від власника репозиторія. (Лист приходить на ту пошту яка привязана до гіт акаунта). Це потрібно для того щоб можна було пушити зміни на репозиторій.
// 8) Всі члени роблять git clone URL в них на машині зявляється папка з назвою репозиторія в якому буде вестися робота
// 9)Кожен член команди створює окрему гілку з мастера під свою задачу і називає її назвою задачі (git checkout -b taskName).
// 10) Щоб запустити збірку потрібна папка node modules. Для того щоб вона зявилася потрібно запустити команду npm i. Після завершення установки запускаємо команду npm start(або якусь іншу. Назву команди можна подивитися в файлі package.json в полі scripts)
// 11) Працюємо і пишемо свій код (Синім в консолі світиться назва вашої гілки). Для фіксації змін пишемо (git add . git commit -m "some text" git push).
// 11.1) При першому пуші команда git push не спрацює. Нам в консолі вибє помилку і запропонує її вирішити за допомогою команди git push --set-upstream origin branchName. (Ця проблема виникає тому що ваша створена гілка відсутня на сайті гітхаб) Ця команда створює ідентичну гілку на гітхабі звязує віддалену і локальну гілки і пушить код.
// 12) Якщо нам потрібен кусок коду нашого колеги ми робимо наступне:
// 12.1) Просимо колегу запушити останій робочий варіант свого коду.
// 12.2) В своїй гілці робимо (git add . git commit -m "some text" git push).
// 12.3) Переходимо в гілку колеги (git checkout hisBranchName)
// 12.4) Стягуємо отанні оновлення коду колеги командою (git pull)
// 12.5) Переходимо в свою гілку (git checkout myBranchName)
// 12.6) Обєднуємо свій код з кодом колеги командою (git merge hisBranchName)
// 12.7) Можуть виникнути конфлікти. Інформація про конфлікти показується в консолі в форматі (CONFLICT: fileName)
// 12.7.1) Якщо немає часу вирішувати конфлікти можна відмінити злиття гілок командою (git merge --abort)
// 12.7.2) Якщо ми вирішили всі конфлікти шляхом видалення непотрібного коду обовязково потрібно зробити  (git add . git commit -m "some text" git push).
// 13) Якщо нам потрібно перейти в іншу гілку, але ми не хочемо комітити поточні зміни. Можемо скористатися командою git stash - ця команда бере весь ваш не закомічений код вирізає і зберігає в буфері гіта.
// 14) Можемо спокійно бігати по інших гілкках і непереживати за наш код який схований в буфері.
// 15) Коли повернулися у свою гілку і хочемо повернути код який знаходиться в буфері пишемо команду git stash apply.
// 16) У нас є можливість перевірити список всіх гілок які є в нас на проекті як локальних так і віддалених.
// 16.1) Команда для перевірки локальних гілок (git branch)
// 16.2) Команда для перевірки віддалених гілок (git branch -r)
// 16.3) Команда для перевірки списку всіх гілок (git branch -a)


// Basic git comands
// git clone - Клонує репозиторій
// git pull - Стягує оновлення з репозиторію
// git push - Записує оновлення коду на віддалений репозиторій
// git status - показує статус в локальному репозитрії
// git add . - гіт починає відслідковувати зміни що внесені в файл
// git commit -m “commit text” - зберігає поточний стан файла
// git commit -am “text commit ” - короткий запис команда git add . та git commit -m “” (Працює лише для вже відстежуваних файлів)
// git log - показує історію комітів
// git branch - показує список локальних гілок
// git branch name - створює гілку з ім’ям name
// git branch -r - показує список віддалених гілок
// git checkout -b name - створює нову гілку з ім’ям “name” і переходить в неї
// git checkout name - перехід до потрібної гілки
// git merge name - злятя гілки “name” в поточну
// git merge --abort - відміна злиття гілок
// git push -u origin name - перший пуш нової локальної гілки на гітхаб
// git branch -d name - видалення локальної гілки (потрібно з неї вийти)
// git push origin --delete name - видалення віддаленої гілки на гітхабі
// git stash - ховає внесені зміни в “карман”. (Використовується тоді коли потрібно перейти в іншу гілку але не хочеться робити коміт)
// git stash apply - відновлює код з “кармана” (Повертає схований код)

// npm - node package manager

// npm i gulp - устанавливаем пакеты для пробакшна
// npm i -save-dev gulp - устанавливаем пакет для разработчика, в продашн они не пойдут.
// не важно в какой последовательности gulp --save-dev === --save-dev gulp